/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Escrow {
  export type AuctionStruct = {
    id: PromiseOrValue<BigNumberish>;
    minAmount: PromiseOrValue<BigNumberish>;
    tittle: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    active: PromiseOrValue<boolean>;
    highestBidder: PromiseOrValue<string>;
    closingTime: PromiseOrValue<BigNumberish>;
  };

  export type AuctionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean,
    string,
    BigNumber
  ] & {
    id: BigNumber;
    minAmount: BigNumber;
    tittle: string;
    description: string;
    owner: string;
    active: boolean;
    highestBidder: string;
    closingTime: BigNumber;
  };

  export type EscrowTypeStruct = {
    id: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    buyer: PromiseOrValue<string>;
    ownerApproved: PromiseOrValue<boolean>;
    buyerApproved: PromiseOrValue<boolean>;
    active: PromiseOrValue<boolean>;
    auctionId: PromiseOrValue<BigNumberish>;
    closingTime: PromiseOrValue<BigNumberish>;
  };

  export type EscrowTypeStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    boolean,
    boolean,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    amount: BigNumber;
    owner: string;
    buyer: string;
    ownerApproved: boolean;
    buyerApproved: boolean;
    active: boolean;
    auctionId: BigNumber;
    closingTime: BigNumber;
  };
}

export interface EscrowInterface extends utils.Interface {
  functions: {
    "Approve(uint256)": FunctionFragment;
    "Bid(uint256)": FunctionFragment;
    "Close(uint256)": FunctionFragment;
    "GetAuction(uint256)": FunctionFragment;
    "GetAuctions()": FunctionFragment;
    "GetEscrow(uint256)": FunctionFragment;
    "GetEscrows()": FunctionFragment;
    "PublishAuction(string,string,uint256)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "escrows(uint256)": FunctionFragment;
    "fee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Approve"
      | "Bid"
      | "Close"
      | "GetAuction"
      | "GetAuctions"
      | "GetEscrow"
      | "GetEscrows"
      | "PublishAuction"
      | "auctions"
      | "escrows"
      | "fee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Approve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "Bid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "Close",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetEscrow",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetEscrows",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PublishAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GetAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GetEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GetEscrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PublishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;

  events: {
    "AuctionCreated(uint256,uint256,string,string,address,bool,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
}

export interface AuctionCreatedEventObject {
  id: BigNumber;
  minAmount: BigNumber;
  tittle: string;
  description: string;
  owner: string;
  active: boolean;
  highestBidder: string;
  closingTime: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, boolean, string, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Bid(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    GetAuction(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Escrow.AuctionStructOutput]>;

    GetAuctions(
      overrides?: CallOverrides
    ): Promise<[Escrow.AuctionStructOutput[]]>;

    GetEscrow(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Escrow.EscrowTypeStructOutput]>;

    GetEscrows(
      overrides?: CallOverrides
    ): Promise<[Escrow.EscrowTypeStructOutput[]]>;

    PublishAuction(
      tittle: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        minAmount: BigNumber;
        tittle: string;
        description: string;
        owner: string;
        active: boolean;
        highestBidder: string;
        closingTime: BigNumber;
      }
    >;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        amount: BigNumber;
        owner: string;
        buyer: string;
        ownerApproved: boolean;
        buyerApproved: boolean;
        active: boolean;
        auctionId: BigNumber;
        closingTime: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  Approve(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Bid(
    id: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Close(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  GetAuction(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Escrow.AuctionStructOutput>;

  GetAuctions(overrides?: CallOverrides): Promise<Escrow.AuctionStructOutput[]>;

  GetEscrow(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Escrow.EscrowTypeStructOutput>;

  GetEscrows(
    overrides?: CallOverrides
  ): Promise<Escrow.EscrowTypeStructOutput[]>;

  PublishAuction(
    tittle: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    minAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      boolean,
      string,
      BigNumber
    ] & {
      id: BigNumber;
      minAmount: BigNumber;
      tittle: string;
      description: string;
      owner: string;
      active: boolean;
      highestBidder: string;
      closingTime: BigNumber;
    }
  >;

  escrows(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      string,
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      id: BigNumber;
      amount: BigNumber;
      owner: string;
      buyer: string;
      ownerApproved: boolean;
      buyerApproved: boolean;
      active: boolean;
      auctionId: BigNumber;
      closingTime: BigNumber;
    }
  >;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    Bid(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    Close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    GetAuction(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Escrow.AuctionStructOutput>;

    GetAuctions(
      overrides?: CallOverrides
    ): Promise<Escrow.AuctionStructOutput[]>;

    GetEscrow(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Escrow.EscrowTypeStructOutput>;

    GetEscrows(
      overrides?: CallOverrides
    ): Promise<Escrow.EscrowTypeStructOutput[]>;

    PublishAuction(
      tittle: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        string,
        BigNumber
      ] & {
        id: BigNumber;
        minAmount: BigNumber;
        tittle: string;
        description: string;
        owner: string;
        active: boolean;
        highestBidder: string;
        closingTime: BigNumber;
      }
    >;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        string,
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        id: BigNumber;
        amount: BigNumber;
        owner: string;
        buyer: string;
        ownerApproved: boolean;
        buyerApproved: boolean;
        active: boolean;
        auctionId: BigNumber;
        closingTime: BigNumber;
      }
    >;

    fee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionCreated(uint256,uint256,string,string,address,bool,address,uint256)"(
      id?: null,
      minAmount?: null,
      tittle?: null,
      description?: null,
      owner?: null,
      active?: null,
      highestBidder?: null,
      closingTime?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      id?: null,
      minAmount?: null,
      tittle?: null,
      description?: null,
      owner?: null,
      active?: null,
      highestBidder?: null,
      closingTime?: null
    ): AuctionCreatedEventFilter;
  };

  estimateGas: {
    Approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Bid(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    GetAuction(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    GetEscrow(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetEscrows(overrides?: CallOverrides): Promise<BigNumber>;

    PublishAuction(
      tittle: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Approve(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Bid(
      id: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Close(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    GetAuction(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GetEscrow(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetEscrows(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PublishAuction(
      tittle: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      minAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
